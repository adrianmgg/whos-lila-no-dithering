// bloom
#include "lila_common.h"

Texture2D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb0 : register(b0)
{
  float4 cb0[128];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

#ifndef LILAMOD_NOBLOOM
  r0.x = cb0[127].w + cb0[127].w;
  r1.xyzw = t0.Sample(s0_s, v1.xy).xyzw;
  r0.yzw = min(cb0[127].yyy, r1.xyz);
  r1.x = max(r0.y, r0.z);
  r1.x = max(r1.x, r0.w);
  r1.y = -cb0[127].z + r1.x;
  r1.z = cb0[127].w + r1.y;
  r1.xz = max(float2(9.99999975e-005,0), r1.xz);
  r0.x = min(r1.z, r0.x);
  r0.x = r0.x * r0.x;
  r1.z = cb0[127].w * 4 + 9.99999975e-005;
  r0.x = r0.x / r1.z;
  r0.x = max(r1.y, r0.x);
  r0.x = r0.x / r1.x;
  r0.xyz = r0.yzw * r0.xxx;
  o0.xyz = max(float3(0,0,0), r0.xyz);
  o0.w = 1;
#endif
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.8 on Sat Mar 16 03:45:52 2024
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[128], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 2
add r0.x, cb0[127].w, cb0[127].w
sample r1.xyzw, v1.xyxx, t0.xyzw, s0
min r0.yzw, r1.xxyz, cb0[127].yyyy
max r1.x, r0.z, r0.y
max r1.x, r0.w, r1.x
add r1.y, r1.x, -cb0[127].z
add r1.z, r1.y, cb0[127].w
max r1.xz, r1.xxzx, l(0.000100, 0.000000, 0.000000, 0.000000)
min r0.x, r0.x, r1.z
mul r0.x, r0.x, r0.x
mad r1.z, cb0[127].w, l(4.000000), l(0.000100)
div r0.x, r0.x, r1.z
max r0.x, r0.x, r1.y
div r0.x, r0.x, r1.x
mul r0.xyz, r0.xxxx, r0.yzwy
max o0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mov o0.w, l(1.000000)
ret
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
