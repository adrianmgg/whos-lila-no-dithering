// world dithering
#include "lila_common.h"

// ---- Created with 3Dmigoto v1.3.8 on Sat Mar 16 01:12:20 2024
Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb0 : register(b0)
{
  float4 cb0[14];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 lilamod_sample = t5.Sample(s5_s, v1.xy);
  r0.xy = lilamod_sample.xw;
#ifndef LILAMOD_SKIP_OFFSET
  r0.x = cb0[13].x + r0.x;
#endif
  o0.w = r0.y;
#ifdef LILAMOD_FULLCOLOR
  o0.xyzw = lilamod_sample.xyzw;
  #ifndef LILAMOD_SKIP_OFFSET
    o0.xyz += cb0[13].xxx;
  #endif
#elif defined(LILAMOD_NO_DITHER)
  #ifdef LILAMOD_CLAMP
    r0.x = clamp(r0.x, 0.0, 1.0);
  #endif
  #ifdef LILAMOD_USE_PALETTE
    o0.xyz = lerp(cb0[12].xyz, cb0[11].xyz, r0.xxx);
  #else
    o0.xyz = r0.xxx;
  #endif
  return;
#else
  r1.xyzw = float4(-0.0470588207,-0.0882429332,-0.185290307,-0.447058797) + r0.xxxx;
  r0.x = -0.70588237 + r0.x;
  r0.x = saturate(3.4000001 * r0.x);
  r0.x = cmp(r0.x >= 0.00999999978);
  r0.x = r0.x ? 1.000000 : 0;
  r1.xyzw = saturate(float4(24.281208,10.3042459,3.82016945,3.86363578) * r1.xyzw);
  r1.xyzw = cmp(r1.xyzw >= float4(0.00999999978,0.00999999978,0.00999999978,0.00999999978));
  r0.y = r1.x ? 0.113207579 : 0.509433985;
  r1.xyzw = r1.xyzw ? float4(0.396225989,1,1,1) : 0;
  r0.y = r1.y * r0.y + r1.x;
  r0.z = 0.603773594 + -r0.y;
  r0.y = r1.z * r0.z + r0.y;
  r0.z = 0.792452812 + -r0.y;
  r0.y = r1.w * r0.z + r0.y;
  r0.z = 1 + -r0.y;
  r0.x = r0.x * r0.z + r0.y;
  r0.y = 0.0549999997 + r0.x;
  r0.yz = float2(0.947867334,0.0773993805) * r0.yx;
  r0.y = log2(r0.y);
  r0.y = 2.4000001 * r0.y;
  r0.y = exp2(r0.y);
  r0.x = cmp(0.0404499993 >= r0.x);
  r0.x = r0.x ? r0.z : r0.y;
  r1.xyzw = cmp(float4(0.550000012,0.589999974,0.270000011,0.140000001) < r0.xxxx);
  r0.yz = float2(64,64) * v1.xy;
  r0.w = t0.Sample(s0_s, r0.yz).x;
  r0.w = r1.x ? r0.w : 0;
  r2.xyzw = cmp(float4(0.600000024,0.360000014,0.270000011,0.219999999) >= r0.xxxx);
  r0.x = cmp(0.0500000007 < r0.x);
  r0.x = r2.w ? r0.x : 0;
  r1.xyz = r1.yzw ? r2.xyz : 0;
  r1.w = t3.Sample(s3_s, r0.yz).x;
  r1.x = r1.x ? r1.w : 0;
  r0.w = r1.x + r0.w;
  r1.x = t1.Sample(s1_s, r0.yz).x;
  r1.x = r1.y ? r1.x : 0;
  r0.w = r1.x + r0.w;
  r1.x = t2.Sample(s2_s, r0.yz).x;
  r0.y = t4.Sample(s4_s, r0.yz).x;
  r0.x = r0.x ? r0.y : 0;
  r0.y = r1.z ? r1.x : 0;
  r0.y = r0.w + r0.y;
  r0.x = r0.y + r0.x;
  r0.x = cmp(r0.x == 0.000000);
  o0.xyz = r0.xxx ? cb0[12].xyz : cb0[11].xyz;
  return;
#endif
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.8 on Sat Mar 16 01:12:20 2024
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xyzw        1     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[14], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 3
sample_indexable(texture2d)(float,float,float,float) r0.xy, v1.xyxx, t5.xwyz, s5
add r0.x, r0.x, cb0[13].x
mov o0.w, r0.y
add r1.xyzw, r0.xxxx, l(-0.0470588207, -0.0882429332, -0.185290307, -0.447058797)
add r0.x, r0.x, l(-0.705882370)
mul_sat r0.x, r0.x, l(3.400000)
ge r0.x, r0.x, l(0.010000)
and r0.x, r0.x, l(0x3f800000)
mul_sat r1.xyzw, r1.xyzw, l(24.281208, 10.304246, 3.82016945, 3.86363578)
ge r1.xyzw, r1.xyzw, l(0.010000, 0.010000, 0.010000, 0.010000)
movc r0.y, r1.x, l(0.113207579), l(0.509434)
and r1.xyzw, r1.xyzw, l(0x3ecade30, 0x3f800000, 0x3f800000, 0x3f800000)
mad r0.y, r1.y, r0.y, r1.x
add r0.z, -r0.y, l(0.603773594)
mad r0.y, r1.z, r0.z, r0.y
add r0.z, -r0.y, l(0.792452812)
mad r0.y, r1.w, r0.z, r0.y
add r0.z, -r0.y, l(1.000000)
mad r0.x, r0.x, r0.z, r0.y
add r0.y, r0.x, l(0.055000)
mul r0.yz, r0.yyxy, l(0.000000, 0.947867334, 0.0773993805, 0.000000)
log r0.y, r0.y
mul r0.y, r0.y, l(2.400000)
exp r0.y, r0.y
ge r0.x, l(0.040450), r0.x
movc r0.x, r0.x, r0.z, r0.y
lt r1.xyzw, l(0.550000, 0.590000, 0.270000, 0.140000), r0.xxxx
mul r0.yz, v1.xxyx, l(0.000000, 64.000000, 64.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r0.w, r0.yzyy, t0.yzwx, s0
and r0.w, r0.w, r1.x
ge r2.xyzw, l(0.600000, 0.360000, 0.270000, 0.220000), r0.xxxx
lt r0.x, l(0.050000), r0.x
and r0.x, r2.w, r0.x
and r1.xyz, r1.yzwy, r2.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.w, r0.yzyy, t3.yzwx, s3
and r1.x, r1.w, r1.x
add r0.w, r0.w, r1.x
sample_indexable(texture2d)(float,float,float,float) r1.x, r0.yzyy, t1.xyzw, s1
and r1.x, r1.x, r1.y
add r0.w, r0.w, r1.x
sample_indexable(texture2d)(float,float,float,float) r1.x, r0.yzyy, t2.xyzw, s2
sample_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t4.yxzw, s4
and r0.x, r0.y, r0.x
and r0.y, r1.x, r1.z
add r0.y, r0.y, r0.w
add r0.x, r0.x, r0.y
eq r0.x, r0.x, l(0.000000)
movc o0.xyz, r0.xxxx, cb0[12].xyzx, cb0[11].xyzx
ret
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
